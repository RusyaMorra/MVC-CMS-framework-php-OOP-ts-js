-- phpMyAdmin SQL Dump
-- version 5.1.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3306
-- Generation Time: Aug 14, 2021 at 05:03 PM
-- Server version: 5.7.33
-- PHP Version: 7.1.33

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `progblog`
--

-- --------------------------------------------------------

--
-- Table structure for table `author`
--

CREATE TABLE `author` (
  `id` int(11) NOT NULL,
  `author_name` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `author`
--

INSERT INTO `author` (`id`, `author_name`, `email`, `password`) VALUES
(1, 'Rusya Morra', 'muso-123@mail.ru', '2a255da8ee7258fa24f654d7ede7e67b'),
(2, 'Mark Zuckerberg', 'ruslan-2493173@mail.ru', 'ddba576ef088a5d462453ebdcce415f6');

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE `categories` (
  `id` int(11) NOT NULL,
  `category_name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `category_name`) VALUES
(1, 'Frontend'),
(2, 'Backend'),
(3, 'MobileDev'),
(4, 'GameDev'),
(5, 'Tools'),
(6, 'Cybersecurity'),
(7, 'DeckstopDev'),
(8, 'Comp.Sciense');

-- --------------------------------------------------------

--
-- Table structure for table `comments`
--

CREATE TABLE `comments` (
  `id` int(11) NOT NULL,
  `comment` text NOT NULL,
  `author_id` int(11) NOT NULL,
  `date` datetime NOT NULL,
  `likes` int(11) NOT NULL,
  `dislikes` int(11) NOT NULL,
  `answers` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `comments`
--

INSERT INTO `comments` (`id`, `comment`, `author_id`, `date`, `likes`, `dislikes`, `answers`) VALUES
(1, 'Thanks!', 1, '2021-08-09 20:11:01', 0, 0, 0),
(2, 'Cool!', 1, '2021-08-09 20:11:01', 0, 0, 0),
(3, 'Good idea!', 2, '2021-08-09 20:11:01', 0, 0, 0),
(4, 'test\r\n', 1, '2021-08-09 20:11:01', 0, 0, 0),
(5, 'testing comments are here', 1, '2021-08-09 20:11:01', 0, 0, 0),
(6, 'hello\r\n', 1, '2021-08-09 20:11:01', 0, 0, 0),
(7, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1, '2021-08-09 20:11:01', 0, 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `text` text NOT NULL,
  `img` varchar(255) NOT NULL,
  `date` datetime NOT NULL,
  `views` int(11) NOT NULL,
  `comments` int(11) NOT NULL,
  `category_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `title`, `text`, `img`, `date`, `views`, `comments`, `category_id`, `author_id`) VALUES
(1, 'how to become a frontend developer?', 'HOW TO BECOME A FRONTEND DEVELOPER FROM LEVEL ZERO TO JUNIOR LEVEL\r\n\r\nPART 1\r\n\r\nStep 1. Introduction (OK)\r\n\r\n? What is the web (OK)\r\n? Client-server communication (OK)\r\n? Http protocol (OK)\r\n? How the browser works (OK)\r\n\r\n\r\nStep 2. Install the code editor, for example VSCode (OK)\r\n\r\n? Learning to work in the development environment (OK)\r\n\r\n\r\nStep 3. Learn the basics of HTML, practice (OK)\r\n\r\n? Tags (OK) ?\r\nMeta tags (OK)\r\n? Viewport (OK)\r\n? Attributes (OK)\r\n? special characters (OK)\r\n? Links (OK) ?\r\nImages + Image formats (OK)\r\n? Lists (OK) ?\r\nTables (OK)?\r\nForms (OK) ?\r\nHTML5 Semantic Tags (OK)\r\n? Inserting multimedia (video, audio) (OK)\r\n\r\n\r\n\r\nStep 4. Learning the basics of CSS (OK)\r\n? Basic Properties (OK)\r\no Text (OK)\r\no Font (OK)\r\no Color (OK)\r\no Gradient (OK)\r\no Units of Measurement (OK)\r\no Frames (OK)\r\no Dimensions (OK)\r\no Positioning (OK)\r\no Margins (OK)\r\no Background (OK)\r\n\r\n? Selectors (OK) ?\r\nCascading (OK)?\r\nPseudo-elements (OK)\r\n? Animation (OK) ?\r\nFlex (OK)\r\n? Grid (OK)\r\n? Adaptive layout (OK)\r\n? Working with SVG (OK)\r\n\r\nAdditionally:\r\n• learning developer tools in Chrome (Style) (OK)\r\n• learning Emmet (preferably) (OK)\r\nOptional:\r\n* Bootstrap (OK)\r\n• BEM (OK)\r\n\r\n\r\nStep 5. Learning git\r\n\r\n? install git bash (quarrel,there is a typo in the video), (OK)\r\n? getting to know github, (OK)\r\n? starting our first repository, (OK)\r\n? are we practicing git (OK) commands\r\n? creating a file .gitignore (OK)\r\n\r\nBe sure to know the commands: (OK)\r\no Git add (OK)\r\no Git status (OK)\r\no Git commit (OK)\r\no Git push (OK)\r\no Git pull (OK)\r\no Git merge (OK)\r\no Git checkout (OK)\r\n\r\n\r\n\r\n\r\nStep 6. Layout of the first site\r\n\r\n? Using Git (OK)\r\n? Adaptive layout (OK)\r\n? Animation (OK) ?\r\nThere are click-throughs on the links (OK)\r\n\r\nIt is advisable to use as much of the acquired knowledge as possible to consolidate them. (OK)\r\n\r\n_____________________________________________________________________________________\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nStep 7. Learning the basics of JS ES5\r\n? What is ECMAScript (OK)\r\n? Variables (OK) ?\r\nData types (OK)\r\n? Arrays (OK)\r\n+ Array Methods (OK)\r\n? Objects (OK)\r\n+ Object Methods\r\n? Functions (OK)\r\n+ Pure functions (OK)\r\n? Context (OK)\r\n+ This (OK)\r\n+ Call (OK)\r\n+ Apply (OK)\r\n+ Bind (OK)\r\n+ Currying (OK)\r\n\r\n? Short circuits (OK)\r\n? Timers (OK)\r\n+ setTimeout (OK)\r\n+ setInterval (OK)\r\n? Promises (OK)\r\n+ Promise (OK)\r\n+ Promise. all (OK)\r\n+ resolve (OK)\r\n+ reject (OK)\r\n? Exceptions (OK)\r\n+ try...catch.. (OK)\r\n+ then (OK)\r\n\r\nAdditionally:\r\n* learning developer tools in Chrome (Sources, Console) + Debugging\r\n• learning how to write comments using JSDoc\r\n\r\nMaterials:\r\nhttps://www.youtube.com/playlist?list... (playlist) - JS basics\r\nor\r\nhttps://www.youtube.com/watch?v=omjT7... (playlist) - JS basics\r\nhttps://learn.javascript.ru/(tutorial)- there is an answer to any of the topics on JS here + examples\r\nhttps://developer.mozilla.org/ru/docs...) - grammar and types\r\nhttps://developer.mozilla.org/ru/docs... (tutorial) - expressions and operators\r\nhttps://learn.javascript.ru/comparison (tutorial) - logical operators, everyone should know!\r\nhttps://developer.mozilla.org/ru/docs... (tutorial) - learn more about arrays\r\nhttps://developer.mozilla.org/ru/docs... (tutorial) - learn more about objects\r\nhttps://learn.javascript.ru/function-... , https://learn.javascript.ru/function -... (tutorial) - about functions\r\nhttps://learn.javascript.ru/recursion (tutorial) - what is recursion\r\nhttps://habr.com/ru/post/437512/ (article) - about pure functions\r\nhttps://learn.javascript.ru/settimeou... (tutorial) - timers\r\nhttps://learn.javascript.ru/exception (tutorial) - error handling\r\nhttps://www.youtube.com/watch?v=DxYU5... (video) - developer tools, part2\r\nhttps://devdocs.io/jsdoc/ (documentation) - JSDoc\r\n\r\nStep 8. Working with DOM elements\r\n\r\n? what is DOM? (OK)\r\n? Document (OK)\r\n+ createElement (OK)\r\n+ getElementById (OK)\r\n+ querySelector (OK)\r\n+ createEvent (OK)\r\n\r\n? Element (OK)\r\n+ children (OK)\r\n+ classList (OK)\r\n+ innerHTML (OK)\r\n+ append (OK)\r\n+ closest (OK)\r\n+ getAttribute (OK)\r\n+ setAttribute (OK)\r\n\r\n? Events (Events) (OK)\r\n+ addEventListene (OK)\r\n+ click (OK)\r\n+ change (OK)\r\n+ focus (OK)\r\n+ blur (OK)\r\n+ mousemove (OK)\r\n+ keydown (OK)\r\n+ custom (OK)\r\n\r\nMaterials:\r\nhttps://developer.mozilla.org/ru/docs... What is DOM?\r\nhttps://www.youtube.com/watch?v=1FpuK... (video) - working with DOM\r\nhttps://developer.mozilla.org/en-US/d... Window\r\nhttps://developer.mozilla.org/en-US/d... Document\r\nhttps://developer.mozilla.org/ru/docs... Element\r\nhttps://learn.javascript.ru/introduct...) - about events (introduction)\r\nhttps://developer.mozilla.org/ru/docs... - creating a custom event\r\n\r\n\r\nStep 9. Inheritance\r\n\r\n? Inheritance (OK) ?\r\nPrototypes (OK)?\r\nConstructors (OK) ?\r\nClasses (OK)\r\n\r\nMaterials:\r\nhttps://javascript.ru/tutorial/object... (tutorial) - about inheritance\r\nhttps://www.youtube.com/watch?v=Qve7g... (video) - prototypical inheritance\r\nhttps://developer.mozilla.org/ru/docs... (tutorial) - inheritance and prototypes\r\nhttps://learn.javascript.ru/prototypes (tutorial)- more about prototypes\r\nhttps://learn.javascript.ru/construct... (tutorial) - about constructors\r\nhttp://jsraccoon.ru/oop-constructors (tutorial) - about constructors\r\nhttps://learn.javascript.ru/classes(y...) - classes\r\n\r\n\r\nStep 10. Working with queries ?\r\nJSON (OK)\r\n? LocalStorage, sessionStorage, Cookie (OK)\r\n? AJAX. XMLHttpRequest. (OK)\r\n? Asynchronous programming.(OK)\r\n? API. Cross-domain requests. CORS (OK)\r\n\r\nMaterials:\r\nhttps://learn.javascript.ru/json (tutorial)- JSON\r\nhttps://developer.mozilla.org/ru/docs... (tutorial) -JSON. parse()\r\nhttps://developer.mozilla.org/ru/docs... (tutorial)-JSON. stringify\r\n\r\nhttps://developer.mozilla.org/ru/docs...) - sessionStorage\r\nhttps://developer.mozilla.org/ru/docs... (tutorial) - localStorage\r\nhttps://developer.mozilla.org/ru/docs... (tutorial)- cookie\r\nhttps://learn.javascript.ru/cookie(uch...) -also about cookies\r\nhttps://learn.javascript.ru/ajax (tutorial) - all about AJAX and XMLHttpRequest\r\nhttps://habr.com/ru/company/ruvds/blo... (article) - methods of working with asynchronous programming\r\nhttps://learn.javascript.ru/promise (textbook) - about promises\r\n\r\nhttps://www.youtube.com/watch?v=5kAPE... (video) - about async/await\r\nhttps://www.youtube.com/watch?v=vNEDP... (video) - promises (ES6 syntax)\r\n\r\nhttps://developer.mozilla.org/ru/docs... (tutorial) - about API\r\nhttps://www.youtube.com/watch?v=ZOAr4... (video) - how to work with API\r\nhttps://developer.mozilla.org/ru/docs... (tutorial) - about CORS\r\n\r\n__________________________________________________________________________\r\n\r\nStep 11. Studying design patterns/templates in JS\r\n\r\n? OOP (OK)?\r\nFunctional Programming (OK)\r\n? MVC (OK)\r\n? Publisher-Subscriber (OK)\r\n? JavaScript modules (OK)\r\n\r\nMaterials:\r\nhttps://habr.com/ru/post/136766/ (article) - about patterns\r\nhttps://learn.javascript.ru/oop (tutorial) - OOP in a functional style\r\nhttps://learn.javascript.ru/prototypes (tutorial) - Prototype-style OOP\r\nhttps://www.youtube.com/watch?v=fdOlCPPjehg&list=PL-h9EBz3QPtHwobmw2eNyCs9y3mHOIzs8 (playlist) - patterns in JS\r\nhttps://habr.com/ru/company/mailru/blog/327522/(article) - functional programming\r\nhttps://www.youtube.com/watch?v=8nWQCcqUwR0 (webinar) - functional programming\r\nhttps://habr.com/ru/company/ruvds/blog/333856/ (article) - MVC\r\nhttps://www.youtube.com/watch?v=9shKSKcSGDo&list=PLY4rE9dstrJya20WfIeVLOuof4yQk8tC_ (playlist) - MVC\r\nhttps://javascript.ru/optimize/antimvc(tutorial) - MVC alternatives\r\nhttps://habr.com/ru/post/270339/ (article) - about pub-sub and observer\r\nhttps://learn.javascript.ru/modules (tutorial) - about modules', 'uploadfile/1628812291DUQBnAKVwAAq_Jd.jpg', '2021-08-13 02:51:00', 41, 0, 1, 1),
(2, 'Knowledge for backend?', '1) choose a language or framework\r\n2)selecting data directly from memory\r\n3)rest api\r\n4) crud services, all sorts of signs\r\nI have written out the most important thing, I am starting to study the world of programming:\r\nSubscribe to the Howdy Ho channel and follow the news by studying the already available material\r\nWhat is GitHub and how to work with it\r\nWhat is AJAX?\r\nWhat is XHR\r\nWhat is a Web Socket\r\nWhat is an iFrame?\r\nWhat is RAM?\r\nWhat is a Processor?\r\nWhat is the Clock frequency\r\nWhat is the Number of cores\r\nWhat is North Bridge?\r\nWhat is Virtualization?\r\nWhat are Processes?\r\nWhat are Services?\r\nWhat is a Video card?\r\nWhat is a Sound card?\r\nWhat is a Motherboard?\r\nWhat is HHD\r\nWhat is an SSD\r\nWhat is the difference between an SSD and a HDD\r\nWhat is BP?\r\nWhat is a UPS\r\nWhat is a modem?\r\nWhat is modulation?\r\nWhat is demodulation?\r\nWhat is ADSL?\r\nWhat is FTTB?\r\nWhat is WiFi?\r\nWhat is GPRS?\r\nWhat is 3G?\r\nWhat is 4G?\r\nWhat is a LAN\r\nWhat are bits?\r\nWhat are bytes?\r\nWhat is the difference between kilobits and kilobytes\r\nWhat is a torrent?\r\nLearn how the network works\r\nStudy the protocols\r\nLearn encryption methods\r\nWhat are real-time applications?\r\nWhat is the AMQP protocol?\r\nWhat is the HTTP protocol?\r\nWhat is a CRP and why is the TCP round trip limit important for it\r\nWhat is Composer?\r\nExplore the Packagist package repository for Composer\r\nWhat is AMQP?\r\nWhat is RabbitMQ?\r\nWhat are debaggers (what is XHProf)\r\nLearn the basics of SQL syntax\r\nLearn how to work with the MySQL database management system\r\nLearn data types\r\nLearn a programming language (PHP| / Python| / Javascript)\r\nWhat is the difference between an interpreter and a compiler\r\nHow to write a pagination\r\nHow to work with Timestamp\r\nHow to connect a cash register for accepting payments on the website (Robokassa)\r\nLearn how to work with the API\r\nHow to work with cURL\r\nWhat is and how to work with .htaccess (in particular, with mod_rewrite)\r\nWhat is a programming pattern?\r\nWhat is the MVC and HMVC programming pattern?\r\nWhat is Memcached and how to work with it\r\nWhat is Redis and how to work with it\r\nWhat is GD and how to work with it\r\nWhat are file locks and how to use them\r\nWhat is Crontab on hosting and how to use it\r\nWhat is Cloudflare and how to work with it\r\nWhat is HTTPS and why is it needed\r\nWhat is JSON data and how to work with it\r\nWhat is XML data and how to work with it\r\nWhat are XSS attacks and how to protect a site from them\r\nWhat are SQL injections and how to protect a website from them\r\nWhat are CSRF attacks and how to protect a website from them\r\nWhat is xDebug and backtracks for code debag and how to use it\r\nWhat are regular expressions and how to work with them\r\nWhat is the xCRUD library and how to work with it\r\nWhat is ORM and how to work with it (for example: RedBeanPHP)\r\nWhat is website parsing and how to do it using the PHP Simple HTML DOM Parser library\r\nWhat is PDO and how to use it\r\nWhat are PHAR archives and how to work with them', 'uploadfile/1628813583front-back111111111111-end2.jpg', '2021-08-13 03:13:00', 4, 0, 2, 1),
(3, 'React!', '1) choose a language or framework\r\n2)selecting data directly from memory\r\n3)rest api\r\n4) crud services, all sorts of signs\r\nI have written out the most important thing, I am starting to study the world of programming:\r\nSubscribe to the Howdy Ho channel and follow the news by studying the already available material\r\nWhat is GitHub and how to work with it\r\nWhat is AJAX?\r\nWhat is XHR\r\nWhat is a Web Socket\r\nWhat is an iFrame?\r\nWhat is RAM?\r\nWhat is a Processor?\r\nWhat is the Clock frequency\r\nWhat is the Number of cores\r\nWhat is North Bridge?\r\nWhat is Virtualization?\r\nWhat are Processes?\r\nWhat are Services?\r\nWhat is a Video card?\r\nWhat is a Sound card?\r\nWhat is a Motherboard?\r\nWhat is HHD\r\nWhat is an SSD\r\nWhat is the difference between an SSD and a HDD\r\nWhat is BP?\r\nWhat is a UPS\r\nWhat is a modem?\r\nWhat is modulation?\r\nWhat is demodulation?\r\nWhat is ADSL?\r\nWhat is FTTB?\r\nWhat is WiFi?\r\nWhat is GPRS?\r\nWhat is 3G?\r\nWhat is 4G?\r\nWhat is a LAN\r\nWhat are bits?\r\nWhat are bytes?\r\nWhat is the difference between kilobits and kilobytes\r\nWhat is a torrent?\r\nLearn how the network works\r\nStudy the protocols\r\nLearn encryption methods\r\nWhat are real-time applications?\r\nWhat is the AMQP protocol?\r\nWhat is the HTTP protocol?\r\nWhat is a CRP and why is the TCP round trip limit important for it\r\nWhat is Composer?\r\nExplore the Packagist package repository for Composer\r\nWhat is AMQP?\r\nWhat is RabbitMQ?\r\nWhat are debaggers (what is XHProf)\r\nLearn the basics of SQL syntax\r\nLearn how to work with the MySQL database management system\r\nLearn data types\r\nLearn a programming language (PHP| / Python| / Javascript)\r\nWhat is the difference between an interpreter and a compiler\r\nHow to write a pagination\r\nHow to work with Timestamp\r\nHow to connect a cash register for accepting payments on the website (Robokassa)\r\nLearn how to work with the API\r\nHow to work with cURL\r\nWhat is and how to work with .htaccess (in particular, with mod_rewrite)\r\nWhat is a programming pattern?\r\nWhat is the MVC and HMVC programming pattern?\r\nWhat is Memcached and how to work with it\r\nWhat is Redis and how to work with it\r\nWhat is GD and how to work with it\r\nWhat are file locks and how to use them\r\nWhat is Crontab on hosting and how to use it\r\nWhat is Cloudflare and how to work with it\r\nWhat is HTTPS and why is it needed\r\nWhat is JSON data and how to work with it\r\nWhat is XML data and how to work with it\r\nWhat are XSS attacks and how to protect a site from them\r\nWhat are SQL injections and how to protect a website from them\r\nWhat are CSRF attacks and how to protect a website from them\r\nWhat is xDebug and backtracks for code debag and how to use it\r\nWhat are regular expressions and how to work with them\r\nWhat is the xCRUD library and how to work with it\r\nWhat is ORM and how to work with it (for example: RedBeanPHP)\r\nWhat is website parsing and how to do it using the PHP Simple HTML DOM Parser library\r\nWhat is PDO and how to use it\r\nWhat are PHAR archives and how to work with them', 'uploadfile/16288137711_EntHChgUyirgbZ9A3zTxkA.png', '2021-08-13 03:16:00', 4, 0, 5, 1),
(4, 'Gamedev how to start?', 'You have always dreamed of building your own game? You have gathered countless ideas for the next great games in your head or on paper? You finally want to start working and take them to life? Then you are probably ready to become a game developer. But what now? Where to start and what to do? And what about that thing called Unity?\r\n\r\nThe world of game development is immense and complex. For beginners it is dangerous to get lost in the wild jungle of game engines and programming languages. While there is a lot of information and many tutorials out there, not all of them provide good advice and few are up to date.\r\n\r\n\r\nOf course, there is no definite way to get into game dev. You will learn a lot of your lessons through simple trial and error. Therefore, this guide is not meant to be a 100% instruction on how games are made but rather a beginner’s manual or a road map to find a good way into the vast continent of game development.\r\n\r\nWhat’s your job?\r\nLet’s start with a very quick look at how games are actually made. What parts make up a game and what jobs or tasks are required to build it?\r\n\r\nA video game is a highly interactive type of media. It usually combines many areas of art with computer programming. Here is a rough overview of the core components which most games are made of.\r\n\r\nSource Code/Engine – Programmer/Software Engineer\r\nGraphics/Models/Animations – Artist/Animator\r\nMusic/Sound Effects – Composer/Sound Designer\r\nLevels/Maps/World – Game Designer/Level Designer\r\nStory – Writer\r\nOf course, there are many variations on these and many more important areas (Distribution, Marketing, Financial, Testing, Tool Building etc.), but these core components and the responsible people basically make a up regular game.\r\n\r\nNow in the game industry big titles, so-called AAA-games (triple-A), are often made by a team of hundreds of people. Because everyone is a specialist in his own field, work is heavily separated. These blockbuster games also have huge budgets sometimes even outstripping those of big movies.\r\n\r\nThe opposite of these AAA-games are Indie games, usually made by small teams or sometimes only a single person. Indie games are usually low-budget, self-funded or crowdfunded (later more on that). Since the mid-late 2000s Indie games have gained popularity and because game development and especially distribution (Steam, App stores etc.) have become easier, the amount of Indie developers has increased tremendously.\r\n\r\nOur third category are Hobby games. This is where we will start. Hobby games are made by people who just love to create games in their spare time. This includes absolute beginners who have just started trying a few things but also more advanced developers who may have already released a few small games to the public. The line between hobby and indie developers is often quite thin but let’s just say the difference is that hobby devs usually make their games as side projects to their actual job, studying etc. while indie devs are involved full-time and make or at least plan to make money with it.\r\n\r\nAs we’ve seen, when we away from the big industry and down to hobby development, the above-mentioned jobs are mostly merged and executed by a single person. And that will be you.', 'uploadfile/1628814368maintenance.jpg', '2021-08-13 03:26:00', 7, 0, 4, 1),
(5, 'C++ a bit about cs! ', 'Object-oriented programming\r\nOOP allows you to look at the program code not as a set of functions, variables and commands, but as classes and objects with their own properties and behavior. This speeds up development and makes the code more understandable.\r\n\r\nNow OOP is considered the most popular programming paradigm. For more information, you can read our series of articles about OOP in C#. Although the implementation in C++ may differ, the principles of object-oriented programming are approximately the same everywhere.\r\n\r\nMultithreading\r\nIt seems that the computer is busy with many tasks at the same time, but this is not the case. The processor core performs only one operation at a time. And visible multitasking is achieved by creating multiple threads for solving tasks.\r\n\r\nYou can read more about this in our article about asynchronous programming (the section about the principle of processor operation will be useful regardless of your language).\r\n\r\nWorking with files\r\nThe data that the program operates with during operation must be saved somewhere so that they do not disappear without a trace. It is more convenient for the user if the program, for example, generates a financial report for him and saves it to an Excel file. If the application cannot do this, it will be hated by those who will have to copy all the data and save it manually.\r\n\r\nWorking with files is important in almost all programs-from games (loading locations, saving progress) to media players (reading audio and video).\r\n\r\nNetwork programming\r\nNow it is difficult to find a program that does not work with the Internet — it is either directly connected to it (online games, browsers, messengers), or simply downloads updates and sends statistics to developers.\r\n\r\nThere are both simple functions for working with the network, such as sending requests and downloading files via a link, and complex ones, such as sockets. And this is also extremely important to know.', 'uploadfile/1628815236articlesiplusplus_201514771.png', '2021-08-13 03:43:00', 1, 0, 8, 1),
(6, 'What is the meaning of cybersecurity?', 'What is the meaning of cybersecurity?\r\nA competent approach to cybersecurity involves several levels of protection for computers, networks, programs and data. The organization must establish the correct interaction of people, processes and technologies to deploy effective protection against cyber attacks. The Unified Threat Management (UTM) system automates the integration of a number of Cisco security products and accelerates the implementation of key security functions: detection, analysis and elimination.\r\n\r\nPeople\r\nUsers should understand and follow the basic principles of data protection, such as choosing strong passwords, being careful when handling email attachments, and reserving data. Learn more about the basic principles of cybersecurity.\r\n\r\nProcesses\r\nOrganizations should deploy a system to prevent cyber attacks and eliminate their consequences. One recognized strategy can help in this. It explains how to detect attacks, protect systems, detect threats, respond to them and eliminate the consequences of successful attacks. Watch a video describing the strategy of the NIST Cybersecurity Framework (1:54)\r\n\r\nTechnologies\r\nTechnologies are the basis for creating computer security tools to protect organizations and individuals from cyber attacks. You need to protect objects of three main groups: end devices, such as computers, smart devices and routers, networks and the cloud. Common technological solutions for protecting these objects are new-generation firewalls, DNS filtering, malware protection, antivirus software, and email protection solutions.\r\n\r\nThe importance of ensuring security in cyberspace\r\nEveryone uses advanced cybersecurity programs in the modern network world. At the individual level, a cyberattack can lead to a variety of consequences: from identity theft to extortion attempts and the loss of important data such as family photos. Everyone depends on critical infrastructure facilities: power plants, hospitals and financial institutions. The protection of these and other organizations is of fundamental importance for the normal functioning of our society.\r\n\r\nAll people also use the results of the work of researchers in the field of cybersecurity. These researchers include 250 scientists from the Talos team who are studying new threats and approaches to cyber attacks. They identify vulnerabilities, tell a wide audience about the importance of cybersecurity and strengthen the protection of open source funds. Their work makes the Internet safer for everyone.', 'uploadfile/1628815501scale_1200.jpg', '2021-08-13 03:45:00', 0, 0, 6, 1),
(7, 'Jquery is still popular?', 'It was created by John Resig in early 2006. Currently, jQuery is being developed and maintained by a distributed development team as an open source project.\r\n\r\nCurrently, the latest version of jQuery is 3.5.1. It is supported in all major browsers: Chrome, Firefox, Safari, Edge, Opera and Internet Explorer 9+.\r\n\r\nAdvantages and disadvantages of jQuery\r\nThe advantages that the jQuery library gives us when using it for writing client scripts:\r\n\r\nthe compactness of the code. It allows you to write code more compactly than in pure JavaScript, i.e. for a much smaller number of lines of code.\r\nsimple and clear syntax. It greatly simplifies the writing of many things, for example, such as manipulating DOM elements, event handling, adding animation effects to the page, AJAX requests, etc.\r\ncross-browser compatibility. The code written in jQuery will be guaranteed to work in all major browsers. While the code written in pure JavaScript will need to be unambiguously checked in all browsers. Because some code fragments may not be supported and their implementation for these browsers will need to be performed in some other way, or for example, use polyfills.\r\nopen source code. The jQuery library is completely free for both personal and commercial projects.\r\nIn addition to the advantages listed above, the jQuery library has, of course, disadvantages.\r\n\r\nThe disadvantages of jQuery include the fact that it can slightly increase the loading speed of a web page (its compressed size is about 30 KB), as well as slightly reduce the performance of code execution than if it were written in pure JavaScript.\r\n\r\njQuery usage statistics\r\nIf we turn to statistics, many large companies use jQuery in their applications and websites. At the same time, the growing trend continues, despite very heated discussions in the IT communities on the topic: \"Is it worth using jQuery or not in 2021?\"', 'uploadfile/1628815952free-javascript-libraries-1280x720.jpg', '2021-08-13 03:52:00', 0, 0, 5, 1),
(8, 'quick deckstop programm', 'Desktop applications are programs whose logic requires the presence of an operator (a person working with the program), containing all the full functionality and able to work separately on any machine in isolation from other applications. Microsoft Word, Excel, Notepad, single-player games are all examples of desktop applications. For their operation, only sufficient computer hardware resources, the application itself and a set of libraries containing functions for working with the application are needed.\r\n\r\nDesktop applications can also be multi-user. For example, a file editor that, depending on the login and password entered at startup, will give access to various files. Both the program and the files are located on the same computer, just local access control is performed for different users.', 'uploadfile/162881611969caa811358601.Y3JvcCwxMTk0LDkzNCwxMDMsMA.jpg', '2021-08-13 03:57:00', 0, 0, 7, 1),
(9, 'Mobiledev is realy cool!', 'In any case, the most difficult thing is the beginning. It is often difficult to get into the context, which I also faced when I decided to develop my first Android application. This article is for those who want to start, but do not know where to start.\r\n\r\nThe article will cover the entire application development cycle. Together we will write a simple game \"Tic-Tac-Toe\" with one screen (in the Android OS this is called Activity).\r\n\r\nLack of experience in Java development should not be an obstacle to mastering Android. So, the examples will not use Java-specific constructs (or they will be minimized as much as possible). If you write, for example, in PHP and are familiar with the basic principles in software development, this article will be most useful to you. In turn, since I am not an expert on Java development, we can assume that the source code does not claim to be labeled “best practices in Java development”.', 'uploadfile/1628817314blog_entry_24-1.jpeg', '2021-08-13 04:15:00', 0, 0, 3, 1),
(10, 'Frontend is it hard?', 'How to master\r\n\r\nFirst of all, you should read a review article or a video about these technologies. So you will understand their essence.\r\n\r\nThen the layout is most convenient to master and improve in practice. Try to make up layouts of pages or individual elements. Also, you can try to watch the page layout process on Youtube and repeat it after the author.\r\n\r\nAt first it will be difficult, and you will often have to contact Google for a solution to another problem. But over time, you will learn to quickly find the correct HTML structure and the necessary CSS properties for the layout of the element in your head.\r\nProgramming in the web begins with this language. It allows you to manage the elements on the page, describe and control the interaction with the interface.\r\n\r\nIf we used HTML and CSS to make up the page, then JavaScript is responsible for the dynamic part of the page: animations, data display, processing actions, and much more.\r\n\r\nWhy do I need it?\r\n\r\nA simple example. Suppose there is a page on which a modal window should be displayed at the click of a button. HTML and CSS will allow us to make the layout of the page itself and the modal window. However, these technologies cannot record and process the click on the button.\r\nThis is where we need JavaScript. We use it to describe the behavior on the page. In the code, we mean: if the user clicked on the button, then you need to show a modal window.', 'uploadfile/1628817912001046735.jpg', '2021-08-13 04:28:00', 0, 0, 1, 1),
(11, 'Backend by simpl words', 'Any website consists of user and server parts. On a page on the Internet, you see text, buttons, panels, images and videos. You can move around the site, freely study the content. Here is the user part of the site and the result of the work of the frontend developer: visualization, interactivity and clarity of the interface. You see a beautiful design, highlighted buttons and interesting typography, the site is convenient to use. But how does it all work from the inside?\r\n\r\nThe server part, which is hidden from the user, is responsible for the logic, efficiency and proper functioning of the site. It is created by a backend developer, and only the site administrator can manage it through a special interface.\r\n\r\nAny request that the user makes is transmitted to the server. All the work takes place there. The request is processed, filtered, and the response is sent back. Backend development is responsible for the correct execution of this process.Any website consists of user and server parts. On a page on the Internet, you see text, buttons, panels, images and videos. You can move around the site, freely study the content. Here is the user part of the site and the result of the work of the frontend developer: visualization, interactivity and clarity of the interface. You see a beautiful design, highlighted buttons and interesting typography, the site is convenient to use. But how does it all work from the inside?\r\n\r\nThe server part, which is hidden from the user, is responsible for the logic, efficiency and proper functioning of the site. It is created by a backend developer, and only the site administrator can manage it through a special interface.\r\n\r\nAny request that the user makes is transmitted to the server. All the work takes place there. The request is processed, filtered, and the response is sent back. Backend development is responsible for the correct execution of this process.', 'uploadfile/1628818399backend.jpg', '2021-08-13 04:33:00', 0, 0, 2, 1),
(12, 'Lib angular!', 'Angular is a framework from Google for creating client applications. First of all, it is aimed at developing SPA solutions (Single Page Application), that is, single-page applications. In this regard, Angular is the successor of another AngularJS framework. At the same time, Angular is not a new version of AngularJS, but a fundamentally new framework.\r\n\r\nAngular provides functionality such as two-way binding, which allows you to dynamically change data in one place of the interface when changing model data in another, templates, routing, and so on.\r\n\r\nOne of the key features of Angular is that it uses TypeScript as a programming language. Therefore, before starting work, it is recommended to familiarize yourself with the basics of this language, which you can read about here.\r\n\r\nBut we are not limited to the TypeScript language. If desired, we can write applications in Angular using languages such as Dart or JavaScript. However, TypeScript is still the main language for Angular.\r\n\r\nThe latest version of Angular-Angular 12 was released in May 2021. The official repository of the framework on github: There you can find the source files themselves, as well as some additional information.', 'uploadfile/16288185061_EyZo5k2TjSZknuGnGFLnGg.png', '2021-08-13 04:35:00', 0, 0, 1, 1),
(13, 'Java java dear java!', 'Define your professional goals and choose a language. This is the most important advice for beginners who want to join the programming community. But how can you do this if you do not understand which language is best suited for your purposes?\r\n\r\nWouldn\'t it be easier if there was one \"market leader\" among the development languages? Then beginners would not be lost in guesses, but would boldly start learning this language, being confident in their demand. Of course, this is something from the category of fiction. Languages are \"tools\" for solving various kinds of problems. And yet, there is one among them, the one-the perfect choice. It is called Java.\r\n\r\nJava is a well-structured, object-oriented language that is quite simple for beginners. You can learn the language quite quickly, because it has a lot of processes that run automatically. You don\'t need to get too deep into how everything works. Java is a cross-platform language. With it, the programmer can create applications that can be easily deployed on any device. Java is a clear favorite of the Internet of Things and an ideal choice for creating enterprise applications.\r\n\r\nFor beginners, there is another important plus — Java has the largest global community and first-class documentation. If you encounter a problem, you will most likely be able to quickly find a ready-made solution for it. A few more advantages: extensive collections and frameworks that are suitable for solving almost all the tasks of a Junior developer.\r\n\r\nFinally, Java is a language with a decent past and a promising future. The last two versions, supplemented with new functionality, were released six months apart. This frequency allows Java to remain at the forefront of the IT industry.\r\n\r\nWhen we talk about a programming language with a low learning curve, it is impossible not to mention the \"pitfalls\". How long will it take to train? Which sources are trustworthy? What mistakes should be avoided? Let\'s look at all this from personal experience.\r\n\r\nAvoid standard problems', 'uploadfile/1628818859Dr5CcwmXQAYvS2K.jpg', '2021-08-13 04:45:37', 0, 0, 2, 1),
(14, 'Hacker cup how to get started!?', 'The 1st person on the leaderboard gains the title and basks in glory.\r\n\r\nFormat and environment\r\n\r\nThe format of judging the Facebook Hacker Cup is very different from other annual programming competitions, such as ACM-ICPC or IOI.\r\n\r\nWhen the contest starts, users must log in to the site.\r\nAfter logging in, they are presented with a set of problems. After you think that you have solved the problem and are sure that it is correct, you need to download the input test file.\r\nAs soon as the input test file is loaded, a timer starts for 6 minutes, and at this time you must run the input test file on top of your code and generate a test file. Within 6 minutes, you need to provide both the code and the output text file.\r\nYou can apply more than once, and only the last correct application will be used for evaluation.\r\nAfter the timer expires, you will not be able to send the solution to this problem again. The time penalty is the sum of the task submission time.\r\nHow to prepare?\r\n\r\nThe Facebook Hacker Cup is especially known for its innovative and sensitive algorithmic tasks. Leaning more towards mathematics and a combination of different concepts, hacker cups test knowledge, implementation, accuracy, speed, conceptuality and almost everything in different rounds.\r\n\r\nYou have to be fast to survive further rounds and innovative to survive the initial long rounds.\r\n\r\nThese are the main topics that should be carefully considered, since problems are usually asked from more than 1 topic combined.', 'uploadfile/1628819432facebook_hackercup.jpg', '2021-08-13 04:50:00', 0, 0, 8, 1),
(15, 'Asembler lvl god!', 'There are high-level languages — these are the ones where you say if-else, print, echo, function, and so on. \"High level\" means that you are talking to the computer in a more or less human language. Another person may not understand what exactly is written in your code, but at least he will be able to read the words.\r\n\r\nBut the computer itself does not understand human language. A computer consists of memory registers, simple logical operations, ones and zeros. Therefore, before your program is executed by the processor, it needs a translator-a program that will turn a high-level programming language into low-level machine code.Binary notation on the fingers\r\n\r\nAssembler is a collective name for low-level languages: the code is still written by a person, but it is already much closer to the principles of computer operation than to the principles of human thinking.\r\n\r\nThere are quite a lot of Assembler options. But since they all work on the same principle and use (basically) the same syntax, we will call all such languages by the common word \"Assembler\".\r\n\r\nHow the processor thinks\r\nTo understand how the Assembler works and why it works this way, we need to understand a little about the internal structure of the processor.\r\n\r\nIn addition to the fact that the processor can perform mathematical operations, it needs to store intermediate data and service information somewhere. To do this, there are special memory cells in the processor itself — they are called registers.\r\n\r\nRegisters are of different types and purposes: some serve to store information; others report on the state of the processor; others are used as navigators so that the processor knows where to go next, and so on. Read more — in the raskhlop', 'uploadfile/1628819583maxresdefault.jpg', '2021-08-13 04:53:00', 0, 0, 8, 1);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `author`
--
ALTER TABLE `author`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `author`
--
ALTER TABLE `author`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT for table `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
